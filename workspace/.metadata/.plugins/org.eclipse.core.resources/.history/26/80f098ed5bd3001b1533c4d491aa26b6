package rs.ac.bg.etf.pp1;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.ast.VisitorAdaptor;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticAnalyzer extends VisitorAdaptor {
	private static Struct currentType = MySymbolTable.noType;
	private static Struct currentMethodReturnType = MySymbolTable.noType;
	private static int currentLevel = 0;
	private static boolean classDefinition = false;
	private static boolean methodDefinition = false;
	private static boolean errorDetected = false;
	private static Obj currentClass = null;
	private static Obj currentMethod = null;
	Logger log = Logger.getLogger(getClass());
	
	private static Map<String, Obj> currentMethodFormParams = new HashMap<String, Obj>();

	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.info(msg.toString());
	}

	public boolean symbolExists(SyntaxNode varDecl, String varName) {
		Obj sym = MySymbolTable.find(varName);
		if (sym != MySymbolTable.noObj && sym.getLevel() == currentLevel) {
			return true;
		}
		return false;

	}

	public void visit(ProgName progName) {
		progName.obj = MySymbolTable.insert(Obj.Prog, progName.getProgName(), MySymbolTable.noType);
		MySymbolTable.openScope();
		System.out.println("Visited progName");
	}

	public void visit(Program program) {
		MySymbolTable.chainLocalSymbols(program.getProgName().obj);
		MySymbolTable.closeScope();
	}

	public void visit(Type type) {
		Obj typeNode = MySymbolTable.find(type.getTypeName());
		if (typeNode == MySymbolTable.noObj) {
			report_error("Nije pronadjen tip " + type.getTypeName() + " u tabeli simbola! ", null);
			type.struct = MySymbolTable.noType;
		} else {
			if (Obj.Type == typeNode.getKind()) {
				type.struct = typeNode.getType();
			} else {
				report_error("Greska: Ime " + type.getTypeName() + " ne predstavlja tip!", type);
				type.struct = MySymbolTable.noType;
			}
		}
		currentType = type.struct;
	}

	public void visit(VarDeclSingle varDecl) {
		if (symbolExists(varDecl, varDecl.getVarName()))
			return;

		boolean isArray = false;
		if (varDecl.getArrayOpt() instanceof Array)
			isArray = true;

		int objKind = 0;
		if (classDefinition && !methodDefinition)
			objKind = Obj.Fld;
		else
			objKind = Obj.Var;

		if (isArray) {

		} else {
			MySymbolTable.insert(objKind, varDecl.getVarName(), currentType);
		}

	}

	public void visit(ConstDeclSingle constDecl) {
		if(MySymbolTable.find(constDecl.getConstName()) != MySymbolTable.noObj) {
			report_error("Greska: Vec postoji simbol: " + constDecl.getConstName(), constDecl);
			return;
		}
		int currentTypeKind = currentType.getKind();
		if (currentTypeKind == Struct.Char || currentTypeKind == Struct.Bool || currentTypeKind == Struct.Int) {
			
            int constType = Struct.None;
            if (constDecl.getInit() instanceof CharConst) {
                constType = Struct.Char;
            } else if (constDecl.getInit() instanceof BoolConst) {
                constType = Struct.Bool;
            } else 
            	constType = Struct.Int;
            
            if(constType == currentTypeKind) {
            	Obj objConst = MySymbolTable.insert(Obj.Con, constDecl.getConstName(), currentType);
                int val = 0;
                if (constDecl.getInit() instanceof CharConst) {
                	
                } else if (constDecl.getInit() instanceof BoolConst) {
                	
                } else if (constDecl.getInit() instanceof NumberConst) {
                	
                }
                objConst.setAdr(val);
            }
            else {
            	report_error("Tip konstante se ne slaze!", constDecl);
            }

      
        } else {
            report_error("Tip nije validan za deklaraciju konstante!", constDecl);
        }
	}
	
	public void visit(ClassName className) {
		classDefinition = true;
		if (MySymbolTable.find(className.getClassName()) != MySymbolTable.noObj) {
			report_error("Greska: Vec postoji simbol: " + className.getClassName(), className);
			return;
		}

		Struct classStruct = new Struct(Struct.Class);
		currentClass = MySymbolTable.insert(Obj.Type, className.getClassName(), classStruct);
		MySymbolTable.openScope();

	}

	public void visit(ClassDecl classDecl) {
		MySymbolTable.chainLocalSymbols(currentClass.getType());
		MySymbolTable.closeScope();
		classDefinition = false;
		currentClass = null;
	}
	
	public void visit(MethodName methodName) {
		methodDefinition = true;
		methodName.obj = MySymbolTable.insert(Obj.Meth, methodName.getMethodName(), currentMethodReturnType);
		currentMethod = methodName.obj;
		
		MySymbolTable.openScope();
		
		if (classDefinition) {
            Obj objThis = MySymbolTable.insert(Obj.Var, "this", currentClass.getType());
			currentMethodFormParams.put("this", objThis);
        }
	}
	
	
	public void visit(MethodDecl methodDecl) {
		MySymbolTable.chainLocalSymbols(currentMethod);
        currentMethod.setLevel(currentMethodFormParams.size());
		MySymbolTable.closeScope();
		currentMethod = null;
		currentMethodFormParams.clear();
	}
	
	public void visit(ReturnType returnType) {
		if(returnType instanceof ReturnTypeExpr) {
			currentMethodReturnType = currentType;
		} 
	}
	
	public void visit(FormParsSingle formPar) {
		Obj objNode = null;
		boolean isArray = false;
		if (formPar.getArrayOpt() instanceof Array)
			isArray = true;
		
		if (isArray) {
			
		} else {
			objNode = MySymbolTable.insert(Obj.Var, formPar.getFormParName(), currentType);
		}
		
		currentMethodFormParams.put(formPar.getFormParName(), objNode);
		
	}
	
	
	public void visit(AssignDes assignDes) {
		if(!(assignDes.getDesignator().obj.getKind() == Obj.Var ||
			assignDes.getDesignator().obj.getKind() == Obj.Fld ||
			assignDes.getDesignator().obj.getKind() == Obj.Elem)) {
			report_error("Designator mora oznacavati promenljivu, polje ili element niza", assignDes);
		}
		//IS ASSIGNABLE DODATI
	}
	
	public void visit(IncDes incDes) {
		if(!(incDes.getDesignator().obj.getKind() == Obj.Var ||
				incDes.getDesignator().obj.getKind() == Obj.Fld ||
				incDes.getDesignator().obj.getKind() == Obj.Elem)) {
				report_error("IncDesignator mora oznacavati promenljivu, polje ili element niza", incDes);
			}
		if(incDes.getDesignator().obj.getType().getKind() != Struct.Int) {
				report_error("IncDesignator mora biti tipa integer", incDes);
			}
	}
	
	public void visit(DecDes decDes) {
		if(!(decDes.getDesignator().obj.getKind() == Obj.Var ||
				decDes.getDesignator().obj.getKind() == Obj.Fld ||
				decDes.getDesignator().obj.getKind() == Obj.Elem)) {
				report_error("DecDesignator mora oznacavati promenljivu, polje ili element niza", decDes);
			}
		if(decDes.getDesignator().obj.getType().getKind() != Struct.Int) {
				report_error("DecDesignator mora biti tipa integer", decDes);
			}
	}
	
	
	
	
	
	
	
	
	

}
