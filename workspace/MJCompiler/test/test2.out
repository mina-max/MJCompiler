Could not rename log file!
Could not rename log file!
INFO  18:16:51,253 - Compiling source file: C:\Users\rm170154d\Desktop\PP-projekat\workspace\MJCompiler\test\test2.mj
INFO  18:16:51,390 - #2 program
INFO  18:16:51,390 - #49 test2
INFO  18:16:51,390 - #49 int
INFO  18:16:51,392 - #49 a
INFO  18:16:51,393 - #12 ;
INFO  18:16:51,396 - #8 const
INFO  18:16:51,396 - #49 int
INFO  18:16:51,396 - #49 b
INFO  18:16:51,396 - #41 =
INFO  18:16:51,396 - #46 1
INFO  18:16:51,396 - #12 ;
INFO  18:16:51,398 - #20 {
INFO  18:16:51,399 - #49 int
INFO  18:16:51,400 - #49 main
INFO  18:16:51,400 - #24 (
INFO  18:16:51,401 - #49 int
INFO  18:16:51,401 - #49 f
INFO  18:16:51,401 - #25 )
INFO  18:16:51,403 - #49 char
INFO  18:16:51,404 - #49 d
INFO  18:16:51,404 - #12 ;
INFO  18:16:51,405 - #20 {
INFO  18:16:51,405 - #49 a
INFO  18:16:51,406 - #41 =
INFO  18:16:51,407 - #46 5
INFO  18:16:51,409 - #12 ;
INFO  18:16:51,409 - #49 b
INFO  18:16:51,410 - #42 ++
INFO  18:16:51,410 - #12 ;
INFO  18:16:51,410 - #49 a
INFO  18:16:51,410 - #43 --
INFO  18:16:51,410 - #12 ;
INFO  18:16:51,410 - #49 d
INFO  18:16:51,410 - #41 =
INFO  18:16:51,411 - #47 d
INFO  18:16:51,411 - #12 ;
INFO  18:16:51,411 - #49 c
INFO  18:16:51,411 - #41 =
INFO  18:16:51,411 - #48 1
INFO  18:16:51,411 - #12 ;
INFO  18:16:51,411 - #50 if
INFO  18:16:51,412 - #24 (
INFO  18:16:51,412 - #49 a
INFO  18:16:51,412 - #25 )
INFO  18:16:51,412 - #20 {
INFO  18:16:51,412 - #15 print
INFO  18:16:51,412 - #24 (
INFO  18:16:51,412 - #49 a
INFO  18:16:51,413 - #25 )
INFO  18:16:51,414 - #12 ;
INFO  18:16:51,414 - #15 print
INFO  18:16:51,414 - #24 (
INFO  18:16:51,414 - #49 b
INFO  18:16:51,414 - #25 )
INFO  18:16:51,414 - #12 ;
INFO  18:16:51,414 - #15 print
INFO  18:16:51,415 - #24 (
INFO  18:16:51,415 - #49 d
INFO  18:16:51,415 - #25 )
INFO  18:16:51,415 - #12 ;
INFO  18:16:51,416 - #21 }
INFO  18:16:51,416 - #21 }
INFO  18:16:51,417 - #21 }
==================SYNTAX TREE==================
Program(
  ProgName(
   test2
  ) [ProgName]
  Declarations(
    Declarations(
      NoDecl(
      ) [NoDecl]
      VarDeclaration(
        VarDeclExpr(
          Type(
           int
          ) [Type]
          VarDeclOne(
            VarDeclSingle(
             a
              NotArray(
              ) [NotArray]
            ) [VarDeclSingle]
          ) [VarDeclOne]
        ) [VarDeclExpr]
      ) [VarDeclaration]
    ) [Declarations]
    ConstDeclaration(
      ConstDecl(
        Type(
         int
        ) [Type]
        ConstDeclOne(
          ConstDeclSingle(
           b
            NumberConst(
             1
            ) [NumberConst]
          ) [ConstDeclSingle]
        ) [ConstDeclOne]
      ) [ConstDecl]
    ) [ConstDeclaration]
  ) [Declarations]
  MethodDeclListExpr(
    NoMethodDeclList(
    ) [NoMethodDeclList]
    MethodDecl(
      ReturnTypeExpr(
        Type(
         int
        ) [Type]
      ) [ReturnTypeExpr]
      MethodSign(
        MethodName(
         main
        ) [MethodName]
        FormParsListOptExpr(
          FormParsOne(
            FormParsSingle(
              Type(
               int
              ) [Type]
             f
              NotArray(
              ) [NotArray]
            ) [FormParsSingle]
          ) [FormParsOne]
        ) [FormParsListOptExpr]
      ) [MethodSign]
      MethodBody(
        VarDeclOnlyExpr(
          NoVars(
          ) [NoVars]
          VarDeclExpr(
            Type(
             char
            ) [Type]
            VarDeclOne(
              VarDeclSingle(
               d
                NotArray(
                ) [NotArray]
              ) [VarDeclSingle]
            ) [VarDeclOne]
          ) [VarDeclExpr]
        ) [VarDeclOnlyExpr]
        StatementListExpr(
          StatementListExpr(
            StatementListExpr(
              StatementListExpr(
                StatementListExpr(
                  StatementListExpr(
                    NoStatement(
                    ) [NoStatement]
                    DesignatorStatementExpr(
                      AssignDes(
                        Designator(
                         a
                          NoDesList(
                          ) [NoDesList]
                        ) [Designator]
                        AssignOperator(
                        ) [AssignOperator]
                        PositiveTerm(
                          TermFactor(
                            ConstFactor(
                              NumberConst(
                               5
                              ) [NumberConst]
                            ) [ConstFactor]
                          ) [TermFactor]
                        ) [PositiveTerm]
                      ) [AssignDes]
                    ) [DesignatorStatementExpr]
                  ) [StatementListExpr]
                  DesignatorStatementExpr(
                    IncDes(
                      Designator(
                       b
                        NoDesList(
                        ) [NoDesList]
                      ) [Designator]
                    ) [IncDes]
                  ) [DesignatorStatementExpr]
                ) [StatementListExpr]
                DesignatorStatementExpr(
                  DecDes(
                    Designator(
                     a
                      NoDesList(
                      ) [NoDesList]
                    ) [Designator]
                  ) [DecDes]
                ) [DesignatorStatementExpr]
              ) [StatementListExpr]
              DesignatorStatementExpr(
                AssignDes(
                  Designator(
                   d
                    NoDesList(
                    ) [NoDesList]
                  ) [Designator]
                  AssignOperator(
                  ) [AssignOperator]
                  PositiveTerm(
                    TermFactor(
                      ConstFactor(
                        CharConst(
                         d
                        ) [CharConst]
                      ) [ConstFactor]
                    ) [TermFactor]
                  ) [PositiveTerm]
                ) [AssignDes]
              ) [DesignatorStatementExpr]
            ) [StatementListExpr]
            DesignatorStatementExpr(
              AssignDes(
                Designator(
                 c
                  NoDesList(
                  ) [NoDesList]
                ) [Designator]
                AssignOperator(
                ) [AssignOperator]
                PositiveTerm(
                  TermFactor(
                    ConstFactor(
                      BoolConst(
                       1
                      ) [BoolConst]
                    ) [ConstFactor]
                  ) [TermFactor]
                ) [PositiveTerm]
              ) [AssignDes]
            ) [DesignatorStatementExpr]
          ) [StatementListExpr]
          IfStatement(
            CorrectCondition(
              CondFactNoRelop(
                PositiveTerm(
                  TermFactor(
                    VarFactor(
                      Designator(
                       a
                        NoDesList(
                        ) [NoDesList]
                      ) [Designator]
                    ) [VarFactor]
                  ) [TermFactor]
                ) [PositiveTerm]
              ) [CondFactNoRelop]
            ) [CorrectCondition]
            ThenStmt(
              ListStatement(
                StatementListExpr(
                  StatementListExpr(
                    StatementListExpr(
                      NoStatement(
                      ) [NoStatement]
                      PrintStatement(
                        PositiveTerm(
                          TermFactor(
                            VarFactor(
                              Designator(
                               a
                                NoDesList(
                                ) [NoDesList]
                              ) [Designator]
                            ) [VarFactor]
                          ) [TermFactor]
                        ) [PositiveTerm]
                        NoPrintParam(
                        ) [NoPrintParam]
                      ) [PrintStatement]
                    ) [StatementListExpr]
                    PrintStatement(
                      PositiveTerm(
                        TermFactor(
                          VarFactor(
                            Designator(
                             b
                              NoDesList(
                              ) [NoDesList]
                            ) [Designator]
                          ) [VarFactor]
                        ) [TermFactor]
                      ) [PositiveTerm]
                      NoPrintParam(
                      ) [NoPrintParam]
                    ) [PrintStatement]
                  ) [StatementListExpr]
                  PrintStatement(
                    PositiveTerm(
                      TermFactor(
                        VarFactor(
                          Designator(
                           d
                            NoDesList(
                            ) [NoDesList]
                          ) [Designator]
                        ) [VarFactor]
                      ) [TermFactor]
                    ) [PositiveTerm]
                    NoPrintParam(
                    ) [NoPrintParam]
                  ) [PrintStatement]
                ) [StatementListExpr]
              ) [ListStatement]
            ) [ThenStmt]
            NoElseStmt(
            ) [NoElseStmt]
          ) [IfStatement]
        ) [StatementListExpr]
      ) [MethodBody]
    ) [MethodDecl]
  ) [MethodDeclListExpr]
) [Program]
INFO  18:16:51,422 - ===================================
======================SEMANTIC ANALYSIS========================
Visited progName
INFO  18:16:51,433 - Globalna promenljiva - Pretraga na 8(a), nadjeno Var a: int, 0, 0 
INFO  18:16:51,433 - Simbolicka konstanta - Pretraga na 9(b), nadjeno Con b: int, 1, 0 
ERROR 18:16:51,433 - IncDesignator mora oznacavati promenljivu, polje ili element niza - Greska na liniji 9
INFO  18:16:51,434 - Globalna promenljiva - Pretraga na 10(a), nadjeno Var a: int, 0, 0 
INFO  18:16:51,434 - Lokalna promenljiva - Pretraga na 11(d), nadjeno Var d: char, 1, 1 
ERROR 18:16:51,434 - Simbol 'c' nije definisan - Greska na liniji 12
ERROR 18:16:51,434 - Ne moze se dodeliti ova vrednost ovoj promenljivoj - Greska na liniji 12
INFO  18:16:51,434 - Globalna promenljiva - Pretraga na 13(a), nadjeno Var a: int, 0, 0 
ERROR 18:16:51,435 - Tip Condition-a mora biti Bool - Greska na liniji 13
INFO  18:16:51,435 - Globalna promenljiva - Pretraga na 14(a), nadjeno Var a: int, 0, 0 
INFO  18:16:51,435 - Simbolicka konstanta - Pretraga na 15(b), nadjeno Con b: int, 1, 0 
INFO  18:16:51,435 - Lokalna promenljiva - Pretraga na 16(d), nadjeno Var d: char, 1, 1 
ERROR 18:16:51,435 - Povratna vrednost main metode mora biti void - Greska na liniji 1
ERROR 18:16:51,435 - Main metoda ne sme da ima argumente - Greska na liniji 1
=====================SYMBOL TABLE DUMP=========================
Type int: int, -1, -1 
Type char: char, -1, -1 
Con eol: char, 10, 0 
Con null: Class [], 0, 0 
Meth chr: char, 0, 1 
   Var i: int, 0, 1 

Meth ord: int, 0, 1 
   Var ch: char, 0, 1 

Meth len: int, 0, 1 
   Var arr: Arr of notype, 0, 1 

Type bool: , -1, -1 
Prog test2: notype, 0, 1 
   Var a: int, 0, 0 
   Con b: int, 1, 0 
   Meth main: int, 0, 1 
      Var f: int, 0, 1 
      Var d: char, 1, 1 



Parsiranje NIJE uspesno zavrseno!
Lista gresaka:

[[Line #9 ]  SEMANTIC_ERROR: IncDesignator mora oznacavati promenljivu, polje ili element niza - Greska na liniji 9, [Line #12]  SEMANTIC_ERROR: Simbol 'c' nije definisan - Greska na liniji 12, [Line #12]  SEMANTIC_ERROR: Ne moze se dodeliti ova vrednost ovoj promenljivoj - Greska na liniji 12, [Line #13]  SEMANTIC_ERROR: Tip Condition-a mora biti Bool - Greska na liniji 13, [Line #1 ]  SEMANTIC_ERROR: Povratna vrednost main metode mora biti void - Greska na liniji 1, [Line #1 ]  SEMANTIC_ERROR: Main metoda ne sme da ima argumente - Greska na liniji 1]
